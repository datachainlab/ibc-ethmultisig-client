// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/ethmultisig/v1/ethmultisig.proto

package types

import (
	fmt "fmt"
	_ "github.com/datachainlab/solidity-protobuf/protobuf-solidity/src/protoc/go"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/hyperledger-labs/yui-ibc-solidity/pkg/ibc/client"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataType defines the type of multisig proof being created. This is done
// to preserve uniqueness of different data sign byte encodings.
type SignBytes_DataType int32

const (
	// Default State
	UNSPECIFIED SignBytes_DataType = 0
	// Data type for client state verification
	CLIENT SignBytes_DataType = 1
	// Data type for consensus state verification
	CONSENSUS SignBytes_DataType = 2
	// Data type for connection state verification
	CONNECTION SignBytes_DataType = 3
	// Data type for channel state verification
	CHANNEL SignBytes_DataType = 4
	// Data type for packet commitment verification
	PACKETCOMMITMENT SignBytes_DataType = 5
	// Data type for packet acknowledgement verification
	PACKETACKNOWLEDGEMENT SignBytes_DataType = 6
	// Data type for packet receipt absence verification
	PACKETRECEIPTABSENCE SignBytes_DataType = 7
	// Data type for next sequence recv verification
	NEXTSEQUENCERECV SignBytes_DataType = 8
	// Data type for header verification
	HEADER SignBytes_DataType = 9
)

var SignBytes_DataType_name = map[int32]string{
	0: "DATA_TYPE_UNINITIALIZED_UNSPECIFIED",
	1: "DATA_TYPE_CLIENT_STATE",
	2: "DATA_TYPE_CONSENSUS_STATE",
	3: "DATA_TYPE_CONNECTION_STATE",
	4: "DATA_TYPE_CHANNEL_STATE",
	5: "DATA_TYPE_PACKET_COMMITMENT",
	6: "DATA_TYPE_PACKET_ACKNOWLEDGEMENT",
	7: "DATA_TYPE_PACKET_RECEIPT_ABSENCE",
	8: "DATA_TYPE_NEXT_SEQUENCE_RECV",
	9: "DATA_TYPE_HEADER",
}

var SignBytes_DataType_value = map[string]int32{
	"DATA_TYPE_UNINITIALIZED_UNSPECIFIED": 0,
	"DATA_TYPE_CLIENT_STATE":              1,
	"DATA_TYPE_CONSENSUS_STATE":           2,
	"DATA_TYPE_CONNECTION_STATE":          3,
	"DATA_TYPE_CHANNEL_STATE":             4,
	"DATA_TYPE_PACKET_COMMITMENT":         5,
	"DATA_TYPE_PACKET_ACKNOWLEDGEMENT":    6,
	"DATA_TYPE_PACKET_RECEIPT_ABSENCE":    7,
	"DATA_TYPE_NEXT_SEQUENCE_RECV":        8,
	"DATA_TYPE_HEADER":                    9,
}

func (x SignBytes_DataType) String() string {
	return proto.EnumName(SignBytes_DataType_name, int32(x))
}

func (SignBytes_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{4, 0}
}

type ClientState struct {
	LatestHeight client.Height `protobuf:"bytes,1,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height"`
	FrozenHeight client.Height `protobuf:"bytes,2,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height" yaml:"frozen_height"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type ConsensusState struct {
	Addresses   [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" yaml:"addresses"`
	Diversifier string   `protobuf:"bytes,2,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	Timestamp   uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

// Header defines a multisig consensus header
type Header struct {
	// height to update multisig public key at
	Height         client.Height   `protobuf:"bytes,1,opt,name=height,proto3" json:"height"`
	Timestamp      uint64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature      *MultiSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	NewAddresses   [][]byte        `protobuf:"bytes,4,rep,name=new_addresses,json=newAddresses,proto3" json:"new_addresses,omitempty" yaml:"new_addresses"`
	NewDiversifier string          `protobuf:"bytes,5,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty" yaml:"new_diversifier"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{2}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type MultiSignature struct {
	Signatures [][]byte `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Timestamp  uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MultiSignature) Reset()         { *m = MultiSignature{} }
func (m *MultiSignature) String() string { return proto.CompactTextString(m) }
func (*MultiSignature) ProtoMessage()    {}
func (*MultiSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{3}
}
func (m *MultiSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSignature.Merge(m, src)
}
func (m *MultiSignature) XXX_Size() int {
	return m.Size()
}
func (m *MultiSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSignature proto.InternalMessageInfo

func (m *MultiSignature) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MultiSignature) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SignBytes struct {
	Height      client.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height"`
	Timestamp   uint64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Diversifier string        `protobuf:"bytes,3,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	// type of the data used
	DataType SignBytes_DataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=SignBytes_DataType" json:"data_type,omitempty" yaml:"data_type"`
	// marshaled HeaderData or StateData
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignBytes) Reset()         { *m = SignBytes{} }
func (m *SignBytes) String() string { return proto.CompactTextString(m) }
func (*SignBytes) ProtoMessage()    {}
func (*SignBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{4}
}
func (m *SignBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBytes.Merge(m, src)
}
func (m *SignBytes) XXX_Size() int {
	return m.Size()
}
func (m *SignBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBytes.DiscardUnknown(m)
}

var xxx_messageInfo_SignBytes proto.InternalMessageInfo

// HeaderData returns the SignBytes data for update verification.
type HeaderData struct {
	// header public key
	NewAddresses [][]byte `protobuf:"bytes,1,rep,name=new_addresses,json=newAddresses,proto3" json:"new_addresses,omitempty" yaml:"new_addresses"`
	// header diversifier
	NewDiversifier string `protobuf:"bytes,2,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty" yaml:"new_diversifier"`
}

func (m *HeaderData) Reset()         { *m = HeaderData{} }
func (m *HeaderData) String() string { return proto.CompactTextString(m) }
func (*HeaderData) ProtoMessage()    {}
func (*HeaderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{5}
}
func (m *HeaderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeaderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeaderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderData.Merge(m, src)
}
func (m *HeaderData) XXX_Size() int {
	return m.Size()
}
func (m *HeaderData) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderData.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderData proto.InternalMessageInfo

type StateData struct {
	Path  []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *StateData) Reset()         { *m = StateData{} }
func (m *StateData) String() string { return proto.CompactTextString(m) }
func (*StateData) ProtoMessage()    {}
func (*StateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9eac80789dcd4f5, []int{6}
}
func (m *StateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateData.Merge(m, src)
}
func (m *StateData) XXX_Size() int {
	return m.Size()
}
func (m *StateData) XXX_DiscardUnknown() {
	xxx_messageInfo_StateData.DiscardUnknown(m)
}

var xxx_messageInfo_StateData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("SignBytes_DataType", SignBytes_DataType_name, SignBytes_DataType_value)
	proto.RegisterType((*ClientState)(nil), "ClientState")
	proto.RegisterType((*ConsensusState)(nil), "ConsensusState")
	proto.RegisterType((*Header)(nil), "Header")
	proto.RegisterType((*MultiSignature)(nil), "MultiSignature")
	proto.RegisterType((*SignBytes)(nil), "SignBytes")
	proto.RegisterType((*HeaderData)(nil), "HeaderData")
	proto.RegisterType((*StateData)(nil), "StateData")
}

func init() {
	proto.RegisterFile("ibc/lightclients/ethmultisig/v1/ethmultisig.proto", fileDescriptor_d9eac80789dcd4f5)
}

var fileDescriptor_d9eac80789dcd4f5 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x5b, 0x37, 0x6d, 0x26, 0x69, 0x1a, 0x0d, 0xa1, 0x64, 0x4d, 0x95, 0x58, 0x46, 0xa0,
	0x1c, 0x36, 0xb1, 0xb6, 0x08, 0x84, 0x16, 0x01, 0x72, 0x9c, 0x59, 0x6a, 0xb6, 0x75, 0x8b, 0xe3,
	0x02, 0xbb, 0x17, 0xcb, 0x49, 0xa6, 0x89, 0x45, 0x62, 0x47, 0x9e, 0x49, 0xdb, 0x70, 0xe4, 0x80,
	0x56, 0x16, 0x48, 0x48, 0x48, 0xdc, 0x22, 0x21, 0xf1, 0x1b, 0xf8, 0x0f, 0x7b, 0xdc, 0x23, 0xa7,
	0x0a, 0xb5, 0xff, 0xa0, 0xbf, 0x00, 0xd9, 0xe3, 0xc4, 0x4e, 0x8b, 0xf6, 0x00, 0x9c, 0x3c, 0xef,
	0xfb, 0xbe, 0xf7, 0xe6, 0xf9, 0x3d, 0x3f, 0x3f, 0xf0, 0xc8, 0xe9, 0xf6, 0xe4, 0x91, 0x33, 0x18,
	0xd2, 0xde, 0xc8, 0xc1, 0x2e, 0x25, 0x32, 0xa6, 0xc3, 0xf1, 0x74, 0x44, 0x1d, 0xe2, 0x0c, 0xe4,
	0xf3, 0x47, 0x69, 0xb3, 0x39, 0xf1, 0x3d, 0xea, 0x09, 0x12, 0xf1, 0x46, 0x4e, 0xdf, 0xa1, 0xb3,
	0x46, 0x64, 0x77, 0xa7, 0x67, 0x0d, 0x7c, 0x49, 0xb1, 0x4b, 0x1c, 0xcf, 0x25, 0xb1, 0xa6, 0x3c,
	0xf0, 0x06, 0x5e, 0x74, 0x94, 0xc3, 0x53, 0x8c, 0x3e, 0x9c, 0x4d, 0x9d, 0x86, 0xd3, 0xed, 0x35,
	0x16, 0x11, 0xe4, 0xc9, 0xb7, 0x03, 0x39, 0xcc, 0x80, 0x5d, 0x2e, 0xab, 0xd1, 0x83, 0xa9, 0xa5,
	0x5f, 0x38, 0x90, 0x67, 0x40, 0x87, 0xda, 0x14, 0xc3, 0x7d, 0xb0, 0x3d, 0xb2, 0x29, 0x26, 0xd4,
	0x1a, 0xe2, 0x30, 0xe1, 0x0a, 0x27, 0x72, 0xf5, 0xfc, 0xfe, 0x66, 0xf3, 0x20, 0x32, 0x5b, 0xfc,
	0xcb, 0xab, 0x5a, 0xc6, 0x28, 0x30, 0x0d, 0xc3, 0xe0, 0x17, 0x60, 0xfb, 0xcc, 0xf7, 0xbe, 0xc3,
	0xee, 0xc2, 0x67, 0x6d, 0xd5, 0x67, 0x2f, 0xf4, 0xb9, 0xbd, 0xaa, 0x95, 0x67, 0xf6, 0x78, 0xf4,
	0x58, 0x5a, 0xd1, 0x4a, 0x46, 0x81, 0xd9, 0x4c, 0xfb, 0x98, 0x7f, 0xf1, 0x5b, 0x2d, 0x23, 0x05,
	0x1c, 0x28, 0xaa, 0x9e, 0x4b, 0xb0, 0x4b, 0xa6, 0x64, 0x91, 0x58, 0xce, 0xee, 0xf7, 0x7d, 0x4c,
	0x08, 0x26, 0x15, 0x4e, 0x5c, 0xaf, 0x17, 0x5a, 0xe5, 0xdb, 0xab, 0x5a, 0x89, 0xc5, 0x5c, 0x52,
	0x92, 0x91, 0xc8, 0xa0, 0x08, 0xf2, 0x7d, 0xe7, 0x1c, 0xfb, 0xc4, 0x39, 0x73, 0xb0, 0x1f, 0xa5,
	0x95, 0x33, 0xd2, 0x10, 0xdc, 0x03, 0x39, 0xea, 0x8c, 0x31, 0xa1, 0xf6, 0x78, 0x52, 0x59, 0x17,
	0xb9, 0x3a, 0x6f, 0x24, 0x40, 0x9c, 0xcc, 0x0f, 0x6b, 0x20, 0x7b, 0x80, 0xed, 0x3e, 0xf6, 0xe1,
	0xbb, 0x20, 0xfb, 0xba, 0xb2, 0xc4, 0xe4, 0x6a, 0xd4, 0xb5, 0x3b, 0x51, 0x61, 0x03, 0xe4, 0x88,
	0x33, 0x70, 0x6d, 0x3a, 0xf5, 0x71, 0x74, 0x67, 0x7e, 0x7f, 0xa7, 0x79, 0x14, 0xb6, 0xbf, 0xb3,
	0x80, 0x8d, 0x44, 0x01, 0x3f, 0x01, 0xdb, 0x2e, 0xbe, 0xb0, 0x92, 0x97, 0xe7, 0xa3, 0x97, 0xaf,
	0x24, 0x05, 0x5d, 0xa1, 0x25, 0xa3, 0xe0, 0xe2, 0x0b, 0x65, 0x59, 0x03, 0x15, 0xec, 0x84, 0x7c,
	0xba, 0x0e, 0x1b, 0x61, 0x1d, 0x5a, 0xc2, 0xed, 0x55, 0x6d, 0x37, 0x09, 0x90, 0x12, 0x48, 0x46,
	0xd1, 0xc5, 0x17, 0xed, 0x04, 0x88, 0x0b, 0xa1, 0x83, 0xe2, 0x6a, 0x9a, 0xb0, 0x0a, 0xc0, 0x32,
	0xd1, 0xb8, 0x2b, 0x46, 0x0a, 0x79, 0x7d, 0x21, 0xa4, 0x9b, 0x0d, 0x90, 0x0b, 0x63, 0xb5, 0x66,
	0x14, 0x93, 0xff, 0xa7, 0xb6, 0x77, 0x3a, 0xbe, 0x7e, 0xbf, 0xe3, 0x4f, 0x40, 0xae, 0x6f, 0x53,
	0xdb, 0xa2, 0xb3, 0x09, 0xae, 0xf0, 0x22, 0x57, 0x2f, 0xee, 0xbf, 0xd1, 0x5c, 0x66, 0xd1, 0x6c,
	0xdb, 0xd4, 0x36, 0x67, 0x13, 0x9c, 0xfe, 0xb8, 0x96, 0x7a, 0xc9, 0xd8, 0xea, 0xc7, 0x3c, 0x84,
	0x80, 0x0f, 0xcf, 0x51, 0x31, 0x0b, 0x46, 0x74, 0x96, 0x7e, 0xe4, 0xc1, 0xd6, 0x22, 0x00, 0xfc,
	0x08, 0xbc, 0xd3, 0x56, 0x4c, 0xc5, 0x32, 0x9f, 0x9d, 0x20, 0xeb, 0x54, 0xd7, 0x74, 0xcd, 0xd4,
	0x94, 0x43, 0xed, 0x39, 0x6a, 0x5b, 0xa7, 0x7a, 0xe7, 0x04, 0xa9, 0xda, 0x13, 0x0d, 0xb5, 0x4b,
	0x19, 0x61, 0x27, 0x98, 0x8b, 0xf9, 0x14, 0x04, 0xdf, 0x03, 0xbb, 0x89, 0xa7, 0x7a, 0xa8, 0x21,
	0xdd, 0xb4, 0x3a, 0xa6, 0x62, 0xa2, 0x12, 0x27, 0x80, 0x60, 0x2e, 0x66, 0x19, 0x06, 0x1f, 0x82,
	0x07, 0x29, 0xdd, 0xb1, 0xde, 0x41, 0x7a, 0xe7, 0xb4, 0x13, 0x4b, 0xd7, 0x84, 0xed, 0x60, 0x2e,
	0xe6, 0x96, 0x30, 0x6c, 0x02, 0x61, 0x45, 0xad, 0x23, 0xd5, 0xd4, 0x8e, 0xf5, 0x58, 0xbe, 0x2e,
	0x14, 0x83, 0xb9, 0x08, 0x12, 0x1c, 0xd6, 0xc1, 0x5b, 0x29, 0xfd, 0x81, 0xa2, 0xeb, 0xe8, 0x30,
	0x16, 0xf3, 0x42, 0x3e, 0x98, 0x8b, 0x9b, 0x31, 0x08, 0x3f, 0x00, 0x6f, 0x27, 0xca, 0x13, 0x45,
	0x7d, 0x8a, 0x4c, 0x4b, 0x3d, 0x3e, 0x3a, 0xd2, 0xcc, 0x23, 0xa4, 0x9b, 0xa5, 0x0d, 0xa1, 0x1c,
	0xcc, 0xc5, 0x12, 0x23, 0x12, 0x1c, 0x7e, 0x06, 0xc4, 0x7b, 0x6e, 0x8a, 0xfa, 0x54, 0x3f, 0xfe,
	0xfa, 0x10, 0xb5, 0x3f, 0x47, 0x91, 0x6f, 0x56, 0x78, 0x10, 0xcc, 0xc5, 0x37, 0x19, 0x7b, 0x87,
	0x84, 0x9f, 0xfe, 0x43, 0x00, 0x03, 0xa9, 0x48, 0x3b, 0x31, 0x2d, 0xa5, 0xd5, 0x41, 0xba, 0x8a,
	0x4a, 0x9b, 0x42, 0x25, 0x98, 0x8b, 0x65, 0xc6, 0xc6, 0x64, 0xcc, 0xc1, 0x0f, 0xc1, 0x5e, 0xe2,
	0xaf, 0xa3, 0x6f, 0x4c, 0xab, 0x83, 0xbe, 0x3c, 0x0d, 0xa9, 0x30, 0xcc, 0x57, 0xa5, 0x2d, 0x96,
	0x78, 0xc8, 0x2c, 0x88, 0x10, 0x87, 0x22, 0x28, 0x25, 0x7e, 0x07, 0x48, 0x69, 0x23, 0xa3, 0x94,
	0x63, 0x9d, 0x61, 0x96, 0xc0, 0xbf, 0xf8, 0xbd, 0x9a, 0x89, 0xa7, 0xe6, 0x57, 0x0e, 0x00, 0xf6,
	0xfb, 0x08, 0x3f, 0x8d, 0xfb, 0xe3, 0xcc, 0xfd, 0xd7, 0x71, 0x5e, 0xfb, 0x97, 0xe3, 0xfc, 0x31,
	0xc8, 0x45, 0xbf, 0xd6, 0x28, 0x2d, 0x08, 0xf8, 0x89, 0x4d, 0x87, 0xd1, 0xec, 0x15, 0x8c, 0xe8,
	0x0c, 0xcb, 0x60, 0xe3, 0xdc, 0x1e, 0x4d, 0x71, 0x74, 0x43, 0xc1, 0x60, 0x06, 0x73, 0x6e, 0xfd,
	0xc4, 0x7d, 0xff, 0x47, 0x65, 0x17, 0x94, 0x7b, 0x9e, 0x4b, 0x7d, 0xbb, 0x47, 0x89, 0xdc, 0xf3,
	0x7c, 0x2c, 0x87, 0x53, 0x42, 0x5e, 0x5e, 0x57, 0xb9, 0x57, 0xd7, 0x55, 0xee, 0xaf, 0xeb, 0x2a,
	0xf7, 0xf3, 0x4d, 0x35, 0xf3, 0xea, 0xa6, 0x9a, 0xf9, 0xf3, 0xa6, 0x9a, 0x79, 0xfe, 0x6c, 0xe0,
	0xd0, 0xe1, 0xb4, 0xdb, 0xec, 0x79, 0x63, 0x39, 0x1c, 0x98, 0xde, 0xd0, 0x76, 0xdc, 0x91, 0xdd,
	0x0d, 0xb7, 0x53, 0x23, 0xb5, 0x03, 0x1b, 0xf1, 0xa6, 0x1a, 0x7b, 0xfd, 0xe9, 0x08, 0x13, 0xb6,
	0x3a, 0x1b, 0x8b, 0xdd, 0x79, 0x79, 0x99, 0xd6, 0xb2, 0x2b, 0xbb, 0xd9, 0x68, 0x9d, 0xbd, 0xff,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x52, 0x57, 0x85, 0x6b, 0x07, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FrozenHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEthmultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEthmultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintEthmultisig(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Diversifier) > 0 {
		i -= len(m.Diversifier)
		copy(dAtA[i:], m.Diversifier)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Diversifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDiversifier) > 0 {
		i -= len(m.NewDiversifier)
		copy(dAtA[i:], m.NewDiversifier)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.NewDiversifier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewAddresses) > 0 {
		for iNdEx := len(m.NewAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewAddresses[iNdEx])
			copy(dAtA[i:], m.NewAddresses[iNdEx])
			i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.NewAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthmultisig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintEthmultisig(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEthmultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MultiSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintEthmultisig(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DataType != 0 {
		i = encodeVarintEthmultisig(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Diversifier) > 0 {
		i -= len(m.Diversifier)
		copy(dAtA[i:], m.Diversifier)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Diversifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintEthmultisig(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEthmultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HeaderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDiversifier) > 0 {
		i -= len(m.NewDiversifier)
		copy(dAtA[i:], m.NewDiversifier)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.NewDiversifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewAddresses) > 0 {
		for iNdEx := len(m.NewAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewAddresses[iNdEx])
			copy(dAtA[i:], m.NewAddresses[iNdEx])
			i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.NewAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthmultisig(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthmultisig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LatestHeight.Size()
	n += 1 + l + sovEthmultisig(uint64(l))
	l = m.FrozenHeight.Size()
	n += 1 + l + sovEthmultisig(uint64(l))
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovEthmultisig(uint64(l))
		}
	}
	l = len(m.Diversifier)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovEthmultisig(uint64(m.Timestamp))
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Height.Size()
	n += 1 + l + sovEthmultisig(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovEthmultisig(uint64(m.Timestamp))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	if len(m.NewAddresses) > 0 {
		for _, b := range m.NewAddresses {
			l = len(b)
			n += 1 + l + sovEthmultisig(uint64(l))
		}
	}
	l = len(m.NewDiversifier)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	return n
}

func (m *MultiSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovEthmultisig(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovEthmultisig(uint64(m.Timestamp))
	}
	return n
}

func (m *SignBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Height.Size()
	n += 1 + l + sovEthmultisig(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovEthmultisig(uint64(m.Timestamp))
	}
	l = len(m.Diversifier)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovEthmultisig(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	return n
}

func (m *HeaderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewAddresses) > 0 {
		for _, b := range m.NewAddresses {
			l = len(b)
			n += 1 + l + sovEthmultisig(uint64(l))
		}
	}
	l = len(m.NewDiversifier)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	return n
}

func (m *StateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	return n
}

func sovEthmultisig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthmultisig(x uint64) (n int) {
	return sovEthmultisig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FrozenHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &MultiSignature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddresses = append(m.NewAddresses, make([]byte, postIndex-iNdEx))
			copy(m.NewAddresses[len(m.NewAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDiversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDiversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= SignBytes_DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddresses = append(m.NewAddresses, make([]byte, postIndex-iNdEx))
			copy(m.NewAddresses[len(m.NewAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDiversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDiversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthmultisig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthmultisig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthmultisig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthmultisig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthmultisig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthmultisig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthmultisig = fmt.Errorf("proto: unexpected end of group")
)
